/* combined: Tue Nov 05 2013 09:44:06 GMT-0600 (Central Standard Time) */
var SYOS = {}, syosDispatch, syosLogRender, syosTestModeActive; if (function () { SYOSView = Backbone.View.extend({ __bbType: "SYOSView", initialize: function () { this.on("didRender", this.didRender, this) }, addSubview: function (n) { this.el.appendChild(n.el) }, removeSubview: function (n) { this.el.removeChild(n.el) }, didRender: function () { }, hide: function () { this.$el.hide() }, show: function () { this.$el.show() }, viewModel: function () { return this }, render: function () { if (this.el) this.el.innerHTML = this.template(this.viewModel()); else throw "Could not find element for " + this._bbType; if (syosLogRender) { console.groupCollapsed(this.__bbType + " rendered"); var n = document.createElement("div"), t = this.template(this.viewModel()); n.innerHTML = t; console.log("dom:", n); console.log("string:", t); console.groupEnd() } return this.trigger("didRender", this), this }, stopProp: function (n) { n.stopPropagation() }, getBBElement: function (n) { return this.el.querySelector('[data-bb="' + n + '"]') }, getBBElementAll: function (n) { return this.el.querySelectorAll('[data-bb="' + n + '"]') } }); SYOSModel = Backbone.Model.extend(); SYOSCollection = Backbone.Collection.extend({ logName: "defaultCollectionName", logEvent: function () { return console.groupEnd(), this } }) }(), SYOS.Core = function () { SYOSCore = Backbone.View.extend({ version: "1.6.3", plugins: {}, initialize: function () { this.config = this.options.config; console.groupCollapsed("SYOS init"); console.log("config", this.config); console.log("settings", this.config.settings); console.groupEnd(); this.styleSheet = document.styleSheets[0]; SYOSView.prototype.syos = this; SYOSModel.prototype.syos = this; SYOSCollection.prototype.syos = this; this.readDOMFields(); this.services = new SYOS.Data.Services; this.settings = new SYOSSettings; this.performance = new SYOSPerformance; this.keyboard = new SYOS.Keyboard.Controller({ el: this.el }); this.performance.on("change:id", this.loadRootData, this); return this.statusView = new SYOSStatusView, this.addSubview(this.statusView), this }, loadRootData: function () { var n = JSON.stringify({ itemId: this.performance.id, syosType: this.syosType }); this.services.getRootConfigData({ data: n, success: _(this.parseRootData).bind(this), error: _(SYOS.Errors.rootDataAjax).bind(this) }) }, parseRootData: function (n) { this.rootData = n.d; this.checkRootData(); console.groupCollapsed("Recieved Root Data"); console.log("response: %o", n.d); console.groupEnd(); this.settings.set("RootConfigId", this.rootData.DataSourceId); this.performance.venue.set("name", this.rootData.VenueName || ""); this.initTest(); this.levels = new SYOSLevelCollection; this.utility = new SYOSUtility; syosDispatch.on("levelDidOpen", this.levelDidOpen, this); this.start(); this.registerPlugins(); syosDispatch.trigger("core:didFinishInit", this); syosDispatch.trigger("didFinishInit", this); this.settings.set(this.config.settings); this.initDisplay(); this.initMap(); this.initPurchasing(); this.singleLevelCheck(); this.trigger("didFinishInit") }, checkRootData: function () { this.rootData.LevelViews.length === 0 && console.warn("RootData LevelView count is 0"); this.rootData.SeatTypeInfos.length === 0 && console.warn("RootData SeatTypeInfos count is 0") }, initMap: _(function () { this.map = this.canvasMap = new SYOS.Canvas.Map; syosDispatch.trigger("map:didFinishInit") }).once(), initDisplay: _(function () { this.display = new SYOSDisplay }).once(), initPurchasing: _(function () { this.reserveDialog = new SYOS.Buymode.ReserveDialog; this.el.appendChild(this.reserveDialog.el); var n = this.settings.get("exchangeMode"), t = this.settings.get("purchaseExternalMode"); t || (n ? (this.exchangeMode = new SYOS.Exchange.Purchasing({ el: this.el }), this.primaryCart = this.exchangeMode.cart) : (this.buymode = new SYOS.Buymode.Controller({ el: this.el }), this.primaryCart = this.buymode.cart)) }).once(), singleLevelCheck: function () { this.levels.length === 1 && (this.display.view.levelSelection && this.display.view.levelSelection.dismiss(), this.display.view.levelSwitch && this.display.view.levelSwitch.deactivate(), this.display.shouldOpenLevel(this.levels.first())) }, openLevelAtIndex: function (n) { var t = this.levels.length, i = this.levels.at(n); if (n < 0 || n > t) throw new SYOS.Error("Invalid level index. Choose an index from 0 to " + t); else this.display.shouldOpenLevel(i) }, loadPerformance: function (n) { this.performance.set("id", n) }, loadPackage: function (n) { this.performance.set("id", n) }, restart: function () { return this.performance.trigger("change:id"), this }, levelDidOpen: function (n) { return this.activeLevel = n, this.trigger("didChangeActiveLevel", n), this }, changePerformance: _(function (n) { return console.group("SYOS: Change Performance"), this.clearActiveLevel(), n !== this.performance.id ? (console.log("New Performance Number:", n), syosDispatch.trigger("showLoadingMessage", { text: "Changing Performance..." }), syosDispatch.trigger("buymode:clearCart"), this.levels.each(function (n) { n.Seats.reset() }), this.performance.set("id", n), this.activeLevel ? this.activeLevel.showLevel() : setTimeout(function () { syosDispatch.trigger("hideLoadingMessage") }, 1e3)) : SYOS.Errors.alreadyOnPerformance(this.performance), console.groupEnd(), this }).throttle(500), start: function () { return _.each(this.rootData.pageDictionary, function (n) { var t = new SYOSLevel(n); this.levels.add(t) }, this), this }, clearActiveLevel: function () { this.activeLevel && this.activeLevel.seats.reset(); this.canvasMap.seatMap.circles.reset(); this.canvasMap.seatMap.renderAll() }, addSubview: SYOSView.prototype.addSubview, removeSubview: SYOSView.prototype.removeSubview, registerPlugins: function () { var n = this.options.config.initOptions.plugins; return n && _.each(n, function (n) { var t = window[n], i; if (_(t).isUndefined()) throw "Plugin " + n + " Model was not defined..."; else i = t.prototype.pluginName, this.plugins[i] = new t }, this), this }, initTest: function () { this.testKeydownCount = 0; $(window).on("keydown", _(this.testKeydownHandler).bind(this)) }, readDOMFields: function () { this.syosType = this.$el.find(".HfSyosType").val() }, testKeydownHandler: function (n) { n.keyCode === 84 && n.shiftKey && (this.testKeydownCount++, this.testKeydownCount === 3 && this.openTest()) }, openTest: function () { var t = "http://cdn.adagetechnologies.com/syos/shared/160/test/", n; location.href.match(/localhost/) && (t = "http://nmartin.adage.adagetechnologies.com:4646/160/test/"); n = document.createElement("script"); n.setAttribute("src", t + "run.js"); document.head.appendChild(n) } }); SYOSSettings = SYOSModel.extend({ defaults: { CurrentZoom: .3, AutoZoom: !0, allowZeroPrice: !1, defaultModalHeight: 50, defaultModalWidth: 50, defaultCanvasHeight: 600, exchangeMode: !1, embeddedZoomModifier: 2, InFullscreen: !1, IE8: !1, showFullscreen: !1, levelSelectDropdown: !0, levelSelectMap: !0, toolsMenu: !0, treeMode: !1, MapX: 0, MapY: 0, mobileViewportHeight: .6, mobilePanFactor: .8, PerformanceNumber: null, maxCartLength: 10, seatRadius: 7, PanIncrement: 20, ZoomIncrement: .2, initialZoomAdjustment: 0, initialXOffset: 0, initialYOffset: 0, reserveConfirm: !0, simplifiedMap: !1, showSeatNumbers: !1, seatviewWidth: 80, seatviewHeight: 80, seatviewIconHeight: 45, seatviewIconWidth: 45, seatTextLimit: .8, levelImageWidth: 950, levelImageHeight: 610, levelImagePadding: 20, seatViewIconPath: "/syos/img/iconPhoto.png", touchZoomFactor: .2, useAutoSizing: !0, circleTextBaseline: "bottom", circleTextFont: "Arial", circleTextOffset: 1, offsetXMin: -Infinity, offsetYMin: -Infinity, offsetXMax: Infinity, offsetYMax: Infinity, boundaryOffsetX: 100, boundaryOffsetY: 100, seatTypeWarningModalCancelText: "Cancel", seatTypeWarningModalConfirmText: "Ok", seatTypeWarningRemoveSeatsOnCancel: !1 }, initialize: function () { syosDispatch.on("didChangeFullscreen", this.didChangeFullscreen); this.syos.on("didFinishInit", this.syosReady, this) }, syosReady: function () { this.set({ Colors: this.syos.rootData.SeatColors }) }, didChangeFullscreen: function (n) { return this.set("InFullscreen", n), this }, adjustZoom: function (n) { var u = this.get("CurrentZoom"), i = this.get("ZoomMax"), r = this.get("ZoomMin"), t = u + n; t > i ? t = i : t < r && (t = r); this.set("CurrentZoom", t) }, goToZoom: function (n) { n > this.get("ZoomMax") ? n = this.get("ZoomMax") : n < this.get("ZoomMin") && (n = this.get("ZoomMin")); this.set("CurrentZoom", n) } }); SYOSUtility = SYOSView.extend({ cleanObject: function (n) { var u = {}, i, t, r; for (i in n) t = n[i], r = t, isNaN(parseInt(t, 10)) || (r = parseInt(t, 10)), u[i] = r; return u }, getUrlVars: function () { for (var t = [], n, r = window.location.href.slice(window.location.href.indexOf("?") + 1).replace("#", "").split("&"), i = 0; i < r.length; i++) n = r[i].split("="), t.push(n[0]), t[n[0]] = n[1]; return t }, getUrlVar: function (n) { var t = this.getUrlVars()[n]; return typeof t != "undefined" ? t : "" }, formatPrice: function (n) { return n = isNaN(n) || n === "" || n === null ? 0 : n, parseFloat(n).toFixed(2) }, formatPrice2: function (n, t) { n = isNaN(n) || n === "" || n === null ? 0 : n; var t = n == parseInt(n, 10) ? 0 : Math.min(20, t); return n.toFixed(t) }, isInArray: function (n, t) { var i = t; if ($.is_int(i) === !1 && (i = parseInt(i, 10)), n.indexOf) return n.indexOf(i) > -1; for (arryIdx = 0; arryIdx < n.length; arryIdx++) if (n[arryIdx] == i) return !0; return !1 }, is_int: function (n) { return typeof n == "number" && parseInt(n, 10) == n }, getCurrentZoom: function () { return this.syos.settings.get("CurrentZoom") }, getZoomIncrement: function () { return this.get("ZoomIncrement") }, getDistance: function (n, t, i, r) { var u = 0, f = 0; return u = t - n, u = u * u, f = r - i, f = f * f, Math.sqrt(u + f) }, getMidpoint: function (n, t, i, r) { return { x: (n + t) / 2, y: (i + r) / 2 } }, scaleCoordinates: function (n, t) { var i = this.getCurrentZoom(); return { x: n * i, y: t * i } }, scaleScalar: function (n) { var t = this.getCurrentZoom(); return n * t }, descendCoordinates: function (n, t) { var i = this.getCurrentZoom(); return { x: n / i, y: t / i } }, getZoomPointCoordinate: function (n, t, i, r) { return (r - i) * t / n + i }, getTouchAverageForKey: function (n, t) { var i = _(n).reduce(function (n, i) { return n + i[t] }, 0); return i / n.length }, getDOMVar: function (n) { return $(n).val() }, getCanvasHeight: function () { var n = { w: $(window).width(), h: $(window).height() }; return n.w < 640 ? n.h * this.syos.settings.get("mobileViewportHeight") : this.syos.settings.get("defaultCanvasHeight") }, isMobileWidth: function () { var n = $(window).width(); return n < 641 }, isTouch: function () { return !location.href.match(/preventtouch/ig) ? "ontouchstart" in document.documentElement : !1 } }); SYOSPricedItem = SYOSModel.extend({ initialize: function () { this.hasPricing = !1 }, maxPrice: function () { return console.error("method not overwritten!"), Infinity }, minPrice: function () { return console.error("method not overwritten!"), -Infinity }, priceRangeString: function () { var n = this.maxPrice(), t = this.minPrice(); return this.hasPricing === !1 ? "Loading..." : isFinite(n) || isFinite(t) ? n === 0 && t === 0 ? this.syos.settings.get("allowZeroPrice") ? "$0" : this.syos.settings.get("emptyPriceString") : n === t ? "$" + this.syos.utility.formatPrice(n) : "$" + this.syos.utility.formatPrice(t) + " - $" + this.syos.utility.formatPrice(n) : "" } }); SYOSLevel = SYOSPricedItem.extend({ zonePrices: [], idAttribute: "LevelNumber", defaults: { LevelName: "unknown" }, initialize: function () { SYOSPricedItem.prototype.initialize.apply(this, arguments); this.SeatTypeInfos = []; this.PriceTypeCollections = this.priceTypeCollections = {}; this.Seats = this.seats = new SYOSSeatCollection; this.seatViews = this.SeatViews = new SYOSSeatViewCollection; this.seatTypes = new SYOSSeatTypeCollection; this.seatColors = new SYOSSeatColorCollection; this.seatViews.add(this.get("SeatViews")); this.set({ LevelName: this.get("LevelHeading") }); this.getLevelPricing() }, getLevelPricing: function () { var n = { performanceNumber: this.syos.performance.id, zoneIds: this.get("ZoneIDs"), configNumber: this.get("DataSourceId"), syosType: this.syos.syosType }; return $.ajax({ url: "/SYOSService/SYOSService.asmx/GetZonesPrices", contentType: "application/json", responseType: "application/json", type: "post", data: JSON.stringify(n), success: _(this.parseLevelPricing).bind(this, this.get("LevelName"), n), error: _(SYOS.Errors.zonePriceAjax).bind(this) }), this }, parseLevelPricing: function (n, t, i) { return console.groupCollapsed("%s Pricing Request Summary", n), console.log("Request: %o", t), console.log("Response: %o", i.d), console.groupEnd(), this.hasPricing = !0, this.zonePrices = _(i.d.zonePrices).compact(), this.trigger("change"), this.trigger("didChangeLevelPricing"), syosDispatch.trigger("core:didChangeLevelPricing"), this }, errorLevelPricing: function (n) { return console.group("Error Level Pricing"), console.log(n), console.groupEnd(), this }, maxPrice: function () { return this.zonePrices.length === 0 ? 0 : Math.max.apply(null, this.zonePrices) }, minPrice: function () { return this.zonePrices.length === 0 ? 0 : Math.min.apply(null, this.zonePrices) }, getPriceTypeCollectionForZone: function (n) { return this.PriceTypeCollections[n.toString()] }, addLevelMeta: function (n) { var i = this, t = 0; _.each(n.SeatTypes, function (n) { $.extend(n, { Priority: t }); this.SeatTypeInfos[n.ID] = n; t++ }, this); _.each(n.AllSeatPricing, function (n) { var r = n.Key, t = new SYOSPriceCollection; _.each(n.Value, function (n) { var i = new SYOSPrice(n); t.add(i) }); i.PriceTypeCollections[r.toString()] = t }); _.each(n.SeatColors, function (n, t) { _(n).extend({ key: t }); this.seatColors.add(n) }, this) }, addBeforeOpen: function (n) { this.beforeOpen = n }, getBeforeOpen: function () { if (this.beforeOpen) return this.beforeOpen(); var n = Q.defer(); return n.resolve(), n.promise }, showLevel: function () { var n = this.getBeforeOpen(); return n.then(_(function () { this.get("HasSeats") ? (console.log("Level Seats cached"), syosDispatch.trigger("levelDidOpen", this)) : this.getSeats() }).bind(this)), this }, getSeats: function () { var t = this, n; return console.group("Level -> seats webservice call"), n = { rootConfigNumber: this.syos.settings.get("RootConfigId"), itemNumber: this.syos.performance.id, configNumber: this.get("DataSourceId"), showAll: !1, syosType: this.syos.syosType }, $.ajax({ url: "/SYOSService/SYOSService.asmx/GetLevelInformation", contentType: "application/json", responseType: "application/json", type: "post", data: JSON.stringify(n), success: _(this.parseSeats).bind(this), error: _(this.errorSeats).bind(this) }), t }, parseSeats: function (n) { console.groupCollapsed("Recieved Level Data"); console.log("Available: %o", n.d.SeatLists[0].length); console.log("Unavailable: %o", n.d.SeatLists[1].length); console.log("Object: %o", n.d); console.groupEnd(); this.addLevelMeta(n.d); this.seatTypes.add(n.d.SeatTypes); this.loadSeatLists(n.d.SeatLists); this.syos.settings.get("exchangeMode") && this.syos.exchangeMode.loadLevelData(n.d); syosDispatch.trigger("levelDidOpen", this); console.groupEnd() }, getBackgroundImageUrl: function () { return "/SYOSService/SyosBackgroundImage.ashx?performanceNumber=" + this.syos.performance.id + "&syosType=" + this.syos.syosType + "&seatRadius=" + this.syos.settings.get("seatRadius") + "&pageid=" + this.get("DataSourceId") + "&hideSeatOutlines=true" }, errorSeats: function () { throw "Error with the get Level Information service call"; }, loadSeatLists: function (n) { var t = this; return this.trigger("willLoadSeatLists", this), _.each(n[0], function (n) { _.extend(n, { IsAvailable: !0, LevelName: t.get("LevelName") }); var i = new SYOSSeat(n); i.seatType = this.seatTypes.get(i.get("SeatType")); i.PriceCollection = t.getPriceTypeCollectionForZone(n.ZoneId); i.PriceCollection || (console.warn("%c WARNING: Unable to assign prices to Seat in Zone %s", "color:red;font-weight:bold;", n.ZoneId), i.PriceCollection = new SYOSPriceCollection); i.SeatTypeInfo = t.SeatTypeInfos[i.get("SeatType").toString()]; t.Seats.add(i) }, this), _.each(n[1], function (n) { _.extend(n, { LevelName: t.get("LevelName") }); var i = new SYOSSeat(n); i.PriceCollection = t.getPriceTypeCollectionForZone(n.ZoneId); i.SeatTypeInfo = t.SeatTypeInfos[i.get("SeatType").toString()]; t.Seats.add(i) }, this), this.trigger("didLoadSeatLists", this), t } }); SYOSLevelCollection = SYOSCollection.extend({ model: SYOSLevel, initialize: function () { this.on("add", this.didAddLevel, this); return this }, didAddLevel: function (n) { return n.set("levelIndex", this.length - 1), this } }); SYOSVenue = SYOSModel.extend(); SYOSPerformance = SYOSModel.extend({ initialize: function () { this.venue = new SYOSVenue } }); SYOSSeatView = SYOSModel.extend(); SYOSSeatViewCollection = SYOSCollection.extend({ logName: "SYOSSeatViewCollection", model: SYOSSeatView, initialize: function () { this.on("all", this.logEvent, this); return this } }); SYOSPrice = SYOSModel.extend({ defaults: { DefaultPrice: 0, Price: 0, customAction: !1 }, initialize: function () { this.formatPrices(); this.set("IsDiscounted", this.getIsDiscounted()); this.on("change:Price", this.formatPrices, this); return this }, getIsDiscounted: function () { return this.get("DefaultPrice") !== this.get("Price") }, formatPrices: function () { return this.set({ defaultPriceFormatted: this.syos.utility.formatPrice(this.get("DefaultPrice")), priceFormatted: this.syos.utility.formatPrice(this.get("Price")) }), this } }); SYOSPriceCollection = SYOSCollection.extend({ model: SYOSPrice, getMax: function () { var n = this.pluck("Price"); return Math.max.apply(null, n) }, getMin: function () { var n = this.pluck("Price"); return Math.min.apply(null, n) }, comparator: function (n) { return -1 * n.get("Price") } }); SYOSSeat = SYOSPricedItem.extend({ defaults: { IsAvailable: !1, IsSelected: !1, IsHighlighted: !1, IsInCart: !1 }, maxPrice: function () { return this.PriceCollection.length !== 0 ? this.PriceCollection.getMax() : 0 }, minPrice: function () { return this.PriceCollection.length !== 0 ? this.PriceCollection.getMin() : 0 }, initialize: function () { SYOSPricedItem.prototype.initialize.apply(this, arguments); this.hasPricing = !0; var n = this; "zoneNames" in this.syos.config && this.getZoneName(); n.has("SeatNumber") && (n.id = n.get("SeatNumber")); n.on("seatPricingRecieved", function (t) { $.each(t, function () { n.Prices.add(new SYOSPrice(this)) }); n.trigger("seatPricingUpdated") }); n.on("setActivePrice", function (t) { n.activePrice = n.PriceCollection.at(t) }) }, getZoneName: function () { var n = parseFloat(this.get("ZoneId")), t = this.syos.config.zoneNames[n] || "Zone " + n; this.set("ZoneDescription", t) }, loadPriceInfo: function (n) { var t = this; $.each(n, function () { t.Prices.add(new SYOSPrice(this)) }); t.trigger("seatPricingUpdated") }, getActivePrice: function () { return this.activePrice }, didSelectSeat: function () { this.set({ IsSelected: !0 }) }, templateJSON: function () { var n = this, t = n.toJSON(); return _.extend(t, { PriceTypes: n.PriceCollection.toJSON() }), typeof n.ActivePrice != "undefined" && _.extend(t, { ActivePrice: n.ActivePrice.toJSON() }), typeof n.SeatTypeInfo != "undefined" && _.extend(t, { SeatTypeInfo: n.SeatTypeInfo }), t } }); SYOSSeatCollection = SYOSCollection.extend({ logName: "SYOSSeatCollection", model: SYOSSeat, getSeatsWithType: function (n) { return this.filter(function (t) { return t.seatType.id === n }) }, getSeatsWithZoneId: function (n) { return this.select(function (t) { return t.get("ZoneId") === n }, this) }, getAllZoneIds: function () { var n = this.pluck("ZoneId"); return _(n).unique() }, getAllSectionIds: function () { var n = this.pluck("SectionId"), t = _(n).unique(); return n }, getAvailableSeats: function () { return this.select(function (n) { return n.get("IsAvailable") }) }, getUnavailableSeats: function () { return this.select(function (n) { return !n.get("IsAvailable") }) } }); SYOSSeatType = SYOSModel.extend({ idAttribute: "ID" }); SYOSSeatTypeCollection = SYOSCollection.extend({ model: SYOSSeatType, comparator: function (n) { return n.get("SeatTypeIndex") } }); SYOSSeatColor = SYOSModel.extend({}); SYOSSeatColorCollection = SYOSCollection.extend({ __bbType: "SYOSSeatColorCollection", model: SYOSSeatColor, getColorForKey: function (n) { return this.detect(function (t) { return t.get("key") === n }) } }); SYOSPlugin = SYOSView.extend({ enabled: !0, initialize: function () { syosDispatch.on("didFinishInit", this.syosReady, this); return this.enabled ? this.initPlugin() : console.warn("Plugin " + this.pluginName + " disabled"), this }, initPlugin: function () { return this } }); SYOSPlugin.extend = _(SYOSPlugin.extend).wrap(function (n, t) { var i = t.pluginName, r; if (typeof t.pluginName != "string") throw "SYOSPlugin " + i + " must have a string for pluginName"; if (typeof t.initPlugin != "function") throw "SYOSPlugin " + i + " must have a function for initPlugin"; return r = _(arguments).rest(1), n.apply(this, r) }) }(), syosDispatch = _(Backbone.Events).clone(), location.href.match(/logevents/)) { console.warn("EVENT LOGGING ON"); syosDispatch.on("all", function (n) { console.groupCollapsed("syosDisptach triggered %o", n); console.log("Arguments: %o", arguments); console.trace(); console.groupEnd() }) } syosLogRender = !!location.href.match(/logrender/); syosLogRender && console.warn("RENDER LOGGING ON"); typeof FlashCanvas != "undefined" && FlashCanvas.setOptions({ turbo: !1, delay: 30 }), function (n, t, i) { syosTestModeActive = !1; var r = function (n) { return new SYOSCore(n) }, u = function () { return this }, f = function (n, t) { var t = t || "(no message provided)"; if (!n) throw "SYOS: Failed BoolCheck! " + t; }; r.Error = function (n) { this.name = "SYOSError"; this.message = n }; r.Error.prototype = Error.prototype; r.Error.printXHRInfo = function () { console.group("%cSYOS XHR Error Details", "color:red;"); var n = arguments[0], t = JSON.parse(n.responseText); i(t).each(function (n, t) { console.group(t); console.log(n); console.groupEnd() }); console.log("error detail: %o", n); console.groupEnd() }; r.Errors = { rootDataAjax: function () { r.Error.printXHRInfo.apply(null, arguments); throw new r.Error("service call for root data failed"); }, reserveSeatsAjax: function () { r.Error.printXHRInfo.apply(null, arguments); throw new r.Error("service call for reserve seats failed!"); }, zonePriceAjax: function () { r.Error.printXHRInfo.apply(null, arguments); throw new r.Error("service call for zone prices failed"); }, alreadyOnPerformance: function (n) { console.warn("Aready on performance!"); console.log("Current Performance: %o", n.toJSON()) } }; r.Geometry = function () { var n = SYOSModel.extend({ defaults: { x: 0, y: 0 }, addX: function (n) { var t = this.get("x"); t += n; this.set("x", t) }, addY: function (n) { var t = this.get("y"); t += n; this.set("y", t) } }); return { Coordinates: n } }(); r.Elements = function () { var t = SYOSView.extend({ initialize: function () { this.on("didRender", this.didRender, this); this.didLoadView && this.didLoadView() }, didRender: u }), f = t.extend({ className: "syos-cart-wrapper", initialize: function () { this.isExpanded = !1; this.seats = new SYOSSeatCollection; this.seats.on("add", this.didAddSeat, this); this.seats.on("remove", this.didRemoveSeat, this); syosDispatch.on("buymode:addSeatToCart", this.didAddSeatToCart, this); syosDispatch.on("buymode:removeSeatFromCart", this.didRemoveSeatFromCart, this); syosDispatch.on("buymode:clearCart", this.shouldClearCart, this); syosDispatch.on("buymode:shouldRemoveSeatsOfType", this.shouldRemoveSeatsOfType, this); this.$el.bind("mousewheel", i(this.stopProp).bind(this)); r.Elements.View.prototype.initialize.apply(this, arguments) }, events: { "click [data-bb-event='remove']": "didClickRemove", "click [data-bb='expandButton']": "didClickExpand", "click [data-bb='reserveButton']": "didClickReserve", "click [data-bb-event='info']": "didClickInfo" }, didAddSeatToCart: function (n) { this.seats.add(n); syosDispatch.trigger("buymode:didChangeCart", this) }, didRemoveSeatFromCart: function (n) { this.seats.remove(n); n.set("IsInCart", !1); n.mapCircle.set("inCart", !1); n.mapCircle.set("underCursor", !1); syosDispatch.trigger("buymode:didChangeCart", this) }, didAddSeat: function (n) { console.log("Cart - adding seat: %o", n); n.set("IsInCart", !0); n.set("IsSelected", !1); this.render() }, didClickInfo: function (n) { this.modal && this.modal.close(); var t = this.getChildElementSeatId(n.currentTarget), i = this.seats.get(t) || this.exchangeSeats.get(t); this.modal = new SYOSModal({ CanDismiss: !0, Title: i.seatType.get("Description"), Content: i.seatType.get("FullPrompt") }) }, didRemoveSeat: function (n) { console.log("Cart - removing seat: %o", n); n.set("IsInCart", !1); n.set("IsSelected", !1); this.render() }, didClickRemove: function (n) { var t = this.getChildElementSeatId(n.currentTarget), i = this.seats.get(t) || this.exchangeSeats.get(t); syosDispatch.trigger("buymode:removeSeatFromCart", i) }, didClickExpand: function () { this.isExpanded = !this.isExpanded; this.render() }, didClickReserve: function (n) { n.preventDefault(); syosDispatch.trigger("buymode:reserveSeats") }, didRender: function () { this.determineVisibility() }, shouldClearCart: function () { this.seats.reset(); syosDispatch.trigger("buymode:didChangeCart", this); this.render() }, shouldRemoveSeatsOfType: function (n) { this.seats.each(function (t) { t.seatType.id === n && syosDispatch.trigger("buymode:removeSeatFromCart", t) }, this) }, getTotalSeats: function () { return this.seats.length }, getAllSeats: function () { return this.seats.models }, getChildElementSeatId: function (t) { var i = n(t).parents("[data-seat-id]")[0], r; return i && (r = i.getAttribute("data-seat-id")), parseInt(r, 10) || 0 }, determineVisibility: function () { var n = this.getTotalSeats(); n === 0 ? this.$el.fadeOut() : this.$el.show() } }); return { View: t, Cart: f } }(); r.Exchange = function () { var f = SYOSView.extend({ initialize: function () { this.cart = new u; this.el.querySelector(".syos-root").appendChild(this.cart.el); this.exchangeZones = new n; this.addonZones = new n; syosDispatch.on("map:seatSelected", this.didSelectSeat, this); syosDispatch.on("canvas:didClickSeat", this.didSelectSeat, this) }, didSelectSeat: function (n) { var t = n.PriceCollection.length; if (t !== 1) throw "SYOS Error: exchange mode does not support multiple price types"; else n.activePrice = n.PriceCollection.at(0), syosDispatch.trigger("buymode:addSeatToCart", n) }, loadLevelData: function (n) { var t = i(n.AllSeatPricing).map(function (n) { var t = i(n.Value["0"]).clone(); return t.ZoneId = parseInt(n.Key), t }), r = i(n.AddOnSections).map(function (n) { var t = i(n).omit("SectionId"); return t.ZoneId = n.SectionId, t }); this.exchangeZones.add(t); this.addonZones.add(r) } }), t = SYOSModel.extend({ idAttribute: "ZoneId" }), n = SYOSCollection.extend({ model: t }), u = r.Elements.Cart.extend({ template: Handlebars.templates["exchangeCart.html"], didLoadView: function () { this.exchangeSeats = new SYOSSeatCollection; this.exchangeSeats.on("add", this.didAddSeat, this); this.exchangeSeats.on("remove", this.didRemoveExchangeSeat, this); this.seatElements = {}; this.$el.hide(); this.render() }, didAddSeatToCart: function (n) { this.isExchangeCartFull() ? this.seats.add(n) : this.exchangeSeats.add(n) }, didRemoveExchangeSeat: function (n) { if (this.seats.length !== 0) { var t = this.seats.first(); this.exchangeSeats.add(t); this.seats.remove(t) } this.didRemoveSeat(n) }, didRemoveSeatFromCart: function (n) { console.log("Exchange Cart: removing seat: %o", n); this.seats.remove(n); this.exchangeSeats.remove(n) }, shouldClearCart: function () { this.seats.reset(); this.exchangeSeats.reset(); this.render() }, getAllSeats: function () { return i.union(this.exchangeSeats.models, this.seats.models) }, getExchangeCount: function () { return this.syos.settings.get("exchangeCount") || 0 }, getTotalSeats: function () { return this.exchangeSeats.length + this.seats.length }, getExchangePricing: function (n) { var i = parseInt(n.get("ZoneId"), 10), t = this.syos.exchangeMode.exchangeZones.get(i); return t ? t.toJSON() : undefined }, getAddonPricing: function (n) { var i = parseInt(n.get("ZoneId"), 10), t = this.syos.exchangeMode.addonZones.get(i); return t ? t.toJSON() : undefined }, isExchangeCartFull: function () { return this.exchangeSeats.length > this.getExchangeCount() - 1 }, hasDowngradeSeat: function () { return this.exchangeSeats.any(function (n) { return n.activePrice.get("Price") < 0 }) }, viewModel: function () { var u = !this.isExpanded && this.getTotalSeats() > 5, n = this.exchangeSeats.map(this.viewModelForExchangeSeat, this), t = this.seats.map(this.viewModelForAddonSeat, this), r = function (n, t) { var i = t.pricing.Price; return i < 0 && (i = 0), n + i }, f = i(n).reduce(r, 0) + i(t).reduce(r, 0); return n.reverse(), t.reverse(), { showExpandButton: u, isExpanded: this.isExpanded, exchangeSeats: n, seats: t, total: f } }, viewModelForAddonSeat: function (n) { var t = n.toJSON(); return i(t).extend({ exchange: !1 }), i(t).extend({ pricing: this.getAddonPricing(n), info: n.seatType.toJSON() }), t }, viewModelForExchangeSeat: function (n) { var t = n.toJSON(); return i(t).extend({ exchange: !0 }), i(t).extend({ pricing: this.getExchangePricing(n), info: n.seatType.toJSON() }), t } }); return { Purchasing: f, Zone: t, ZoneCollection: n, ExchangeCart: u } }(); r.Data = {}; r.Data.Services = SYOSView.extend({ serviceRoot: "/SYOSService/SYOSService.asmx", defaultOptions: i(function () { return { contentType: "application/json", responseType: "application/json", type: "post", success: i(this.defaultSuccess).bind(this), error: i(this.defaultError).bind(this) } }).memoize(), defaultSuccess: function (n) { console.log(n) }, defaultError: function (n) { console.log(n) }, makeRequest: function (t, r) { var u = i(r).defaults(this.defaultOptions()); i(u).extend({ url: t }); console.groupCollapsed("%cData request to %s with options", "color:#670099; font-weight:bold", t); console.log("XHR Options: %o", u); console.groupEnd(); n.ajax(u) }, reserveSeats: function (n) { this.makeRequest(this.serviceRoot + "/ReserveSeats", n) }, getRootConfigData: function (n) { this.makeRequest(this.serviceRoot + "/GetRootConfigData", n) } }); r.Buymode = function () { var f = SYOSView.extend({ initialize: function () { this.initCart(); this.seatPopup = new u; syosDispatch.on("global:levelInformationLoaded", this.didLoadLevelInfo, this) }, initCart: function () { this.cart = new t; this.getBBElement("syosRoot").appendChild(this.cart.el) }, didLoadLevelInfo: function (n) { return this.Level = new SYOSLevel, this.Level.loadLevel(n), syosDispatch.trigger("buymode:ensureMapAccuracy", _this), this }, didChangeExchangeSeatCount: function (n) { console.log("SYOS: Changing exchange count to %s", n); this.exchangeCount = n }, reserveSeatResults: function (n) { return console.log("reserve seats results", n), this }, reserveSeatError: function (t) { var e = this, f, r, u, o, s; return syosDispatch.trigger("hideLoadingMessage"), t._message && (f = n("script[type='text/reserve-error-template']"), r = i.detect(f, function (i) { var r = n(i).attr("data-error-string"), u = t._message.indexOf(r); if (u !== -1) return !0 }), console.groupEnd(), r = r ? n(r) : n("#reserve-error-general"), console.log("Error Template", r), u = r.attr("data-action"), o = function () { HtmlSyos.restart() }, u && u === "dismiss" && (u = function (n) { n.close() }), s = new SYOSModal({ CanDismiss: !1, Title: r.attr("data-error-title"), Content: r.html(), Width: 60, Height: 35, Actions: [{ ButtonText: r.attr("data-button-text"), Fn: u }] })), console.log(t), e } }), t = r.Elements.Cart.extend({ template: Handlebars.templates["cart.html"], viewModel: function () { var t = this.seats.length > this.syos.settings.get("maxCartLength"), n = this.seats.map(this.viewModelForSeat, this), r = i(n).reduce(function (n, t) { return n + t.pricing.Price }, 0); return { isExpanded: this.isExpanded, showExpandButton: t, seats: n, total: r } }, viewModelForSeat: function (n) { var t = n.toJSON(); return i(t).extend({ pricing: n.getActivePrice().toJSON() }), i(t).extend({ info: n.seatType.toJSON() }), t } }), u = SYOSView.extend({ id: "seatPopupView", className: "syos-seat-popup-view", template: Handlebars.templates["popup.html"], initialize: function () { this.position = new r.Geometry.Coordinates; this.faded = !1; this.shown = !1; n("#syos").prepend(this.$el); this.$el.hide(); syosDispatch.on("canvas:didClickSeat", this.didSelectSeat, this); syosDispatch.on("keyboard:escape", this.closePopup, this); syosDispatch.on("map:willDrag", this.willDragMap, this); syosDispatch.on("map:dragged", this.didDragMap, this); syosDispatch.on("control:smartZoom", this.movePopupToActiveSeat, this) }, events: { "click .syos-popup-addToCart": "addButtonClicked", "click .syos-popup-closeButton": "closePopup" }, didDragMap: function () { this.movePopupToActiveSeat(); this.unfadePopup() }, willDragMap: function () { this.fadePopup() }, didSelectSeat: function (n) { if (this.activeSeat && this.clearSeatSelectedState(), n.get("IsInCart")) return syosDispatch.trigger("buymode:removeSeatFromCart", n), !0; this.activeSeat = n; this.activeSeat.mapCircle.set("selected", !0); this.render(); var t = this.activeSeat.PriceCollection.length; t === 1 ? (this.addActiveSeatWithPriceIndex(0), this.closePopupImmeadiate()) : t === 0 && (this.closePopupImmeadiate(), alert("No Pricing Available for this Seat")) }, clearSeatSelectedState: function () { this.activeSeat && (this.activeSeat.set({ IsSelected: !1 }), this.activeSeat.mapCircle.set("selected", !1)) }, render: function () { this.el.innerHTML = this.template(this); this.openPopup(); this.movePopupToActiveSeat() }, getActiveSeatPosition: function () { var n, i, t; return this.activeSeat ? (i = this.activeSeat.mapCircle, t = this.activeSeat.mapCircle.scaledAttributes().radius, n = this.syos.canvasMap.getPositionForCircle(i), n.x += t, n.y += t) : n = { x: 0, y: 0 }, n }, getCurrentPosition: function () { return { x: parseFloat(this.$el.css("left")), y: parseFloat(this.$el.css("top")) } }, movePopupToActiveSeat: function () { var n = this.getActiveSeatPosition(), t = { top: n.y + "px", left: n.x + "px" }; this.shown ? this.$el.animate(t, { duration: 300, easing: "easeOutSine" }) : this.$el.css(t) }, openPopup: function () { this.shown = !0; this.$el.show(); this.faded && this.unfadePopup() }, closePopup: function () { this.clearSeatSelectedState(); this.shown = !1; syosDispatch.trigger("buymode:seatInfoClosed", this.activeSeat); this.$el.hide("drop", { duration: 300, easing: "easeInSine", direction: "down" }) }, closePopupImmeadiate: function () { this.$el.css("display", "none"); this.closePopup() }, fadePopup: function () { this.faded = !0; var n = { opacity: .5 }; this.shown ? this.$el.animate(n) : this.$el.css(n) }, unfadePopup: function () { this.faded = !1; var n = { opacity: 1 }; this.shown ? this.$el.animate(n) : this.$el.css(n) }, addActiveSeatWithPriceIndex: function (n) { this.activeSeat.trigger("setActivePrice", n); this.activeSeat.set({ IsInCart: !0 }); syosDispatch.trigger("buymode:addSeatToCart", this.activeSeat) }, addActiveSeatToCart: function () { }, addButtonClicked: function (t) { var i = n(t.currentTarget), r = i.parents("tr").index(); this.addActiveSeatWithPriceIndex(r); this.closePopup() } }), e = SYOSView.extend({ className: "syos-reserve-dialog-wrap", template: Handlebars.templates["reserveDialog.html"], initialize: function () { SYOSView.prototype.initialize.apply(this, arguments); this.seats = new SYOSSeatCollection; syosDispatch.on("buymode:reserveSeats", this.shouldReserveSeats, this); this.postReserveActions = []; this.close(); this.render() }, events: { "click [data-bb='reserveCancel']": "didClickReserveCancel", "click [data-bb='reserveConfirm']": "didClickReserveConfirm" }, addPostReserveAction: function (n) { this.postReserveActions.push(n) }, didClickReserveCancel: function () { this.syos.settings.get("seatTypeWarningRemoveSeatsOnCancel") && syosDispatch.trigger("buymode:shouldRemoveSeatsOfType", this.currentWarningSeatType.get("ID")); this.close() }, didClickReserveConfirm: function () { this.confirmPrompt = null; this.render(); this.sendReserveRequest() }, shouldReserveSeats: function () { this.reset(); this.seats.add(this.syos.primaryCart.getAllSeats()); console.log("Reserving with seats: %o", this.seats); this.open(); this.syos.settings.get("reserveConfirm") ? this.showSeatTypeWarning() : this.sendReserveRequest() }, getReserveString: function () { var n = ""; return this.seats.each(function (t) { n += t.get("SeatNumber") + "," + t.activePrice.get("PriceTypeId") + "," + t.get("SeatType") + ";" }), n }, setAjaxString: i(function (n) { this.getBBElement("reserveAjax").innerText = n }).throttle(1e3), showSeatTypeWarning: function () { var i = new SYOSSeatTypeCollection, n, t; this.seats.each(function (n) { i.add(n.seatType) }); n = i.first(); t = n.get("ConfirmPrompt"); t ? (this.currentWarningSeatType = n, this.confirmPrompt = { dialogText: t, cancelButtonText: this.syos.settings.get("seatTypeWarningModalCancelText"), confirmButtonText: this.syos.settings.get("seatTypeWarningModalConfirmText") }, this.render()) : this.sendReserveRequest() }, open: function () { this.dialogEl.style.display = "none"; this.el.style.display = "block"; n(this.dialogEl).show("clip") }, close: function () { this.el.style.display = "none" }, didRender: function () { this.dialogEl = this.getBBElement("reserveDialog") }, reset: function () { this.seats.reset(); this.confirmPrompt = null; this.errorPrompt = null; this.render() }, viewModel: function () { var n = !0; return (this.confirmPrompt || this.errorPrompt) && (n = !1), { seats: this.seats, showWait: n, confirmPrompt: this.confirmPrompt, errorPrompt: this.errorPrompt } }, showErrorForMessage: function (t) { var t = t.toLowerCase(), r = "reserve-error-general", u, f; i(n('script[type="text/reserve-error-template"]')).each(function (n) { var i = n.getAttribute("data-error-string").toLowerCase(), u = new RegExp(t), f = !!i.match(u); f && (r = n.id) }); console.log("selected error template: " + r); u = document.querySelector("#" + r); f = n(u).html(); this.errorPrompt = { title: u.getAttribute("data-error-title"), content: f }; this.render() }, sendReserveRequest: function () { var n = this.getReserveString(), t = { seatString: n, itemNumber: this.syos.performance.id, syosType: this.syos.syosType }, r = { data: JSON.stringify(t), beforeSend: i(this.reserveSend).bind(this), error: i(this.reserveError).bind(this), success: i(this.reserveSuccess).bind(this) }; return this.syos.services.reserveSeats(r), this }, reserveSend: function () { this.setAjaxString("Sending..."); this.blockRedirect = !1 }, reserveError: function (n) { var t = JSON.parse(n.responseText); this.setAjaxString("Error reserving seats."); console.log("Error reserving seats: %o", t); this.showErrorForMessage(t.Message); i(r.Errors.reserveSeatsAjax).bind(this) }, reserveSuccess: function (n) { syosDispatch.trigger("buymode:reserveSuccess"); this.redirect = n.d; var t = i.bind(function () { console.log("SYOS PostReserveAction Complete, Redirecting..."); this.setAjaxString("Redirecting..."); this.doRedirect() }, this), r = i.after(this.postReserveActions.length, t); i(this.postReserveActions).invoke("then", r) }, doRedirect: function () { this.windowObject ? this.pageRedirect(this.windowObject) : this.pageRedirect(window) }, pageRedirect: function (n) { i(function () { n.location.href = this.redirect }).chain().bind(this).delay(500) }, useWindowObject: function (n) { this.windowObject = n } }); return { Controller: f, Cart: t, SeatPopup: u, ReserveDialog: e } }(); r.Touch = function () { var n = function (n) { this.el = n.el; this.syos = SYOSView.prototype.syos; this.initListeners() }; return n.prototype = { initListeners: function () { Hammer(this.el).on("pinch", i(this.didPinch).bind(this)); Hammer(this.el).on("doubletap", i(this.didDoubleTap).bind(this)); Hammer(this.el).on("drag", i(this.didDrag).bind(this)); Hammer(this.el).on("dragstart", i(this.didDragStart).bind(this)); Hammer(this.el).on("dragend", i(this.didDragEnd).bind(this)) }, didPinch: i(function (n) { var t, i; n.preventDefault(); n.stopPropagation(); n.gesture.preventDefault(); n.gesture.stopPropagation(); t = n.gesture; syosDispatch.trigger("touch:didPinch", n.gesture, n); var r = this.syos.utility.getCurrentZoom(), f = r * t.scale, u = f - r; u *= this.syos.settings.get("touchZoomFactor"); i = { x: this.syos.utility.getTouchAverageForKey(t.touches, "clientX"), y: this.syos.utility.getTouchAverageForKey(t.touches, "clientY") }; syosDispatch.trigger("control:smartZoom", u, i.x, i.y); this.lastPinchCenter = t.center }).debounce(500), didDoubleTap: function (n) { n.preventDefault(); n.stopPropagation(); var t = n.gesture; syosDispatch.trigger("touch:didDoubleTap", n.gesture) }, didDrag: function (n) { var t, i, r; return n.preventDefault(), n.stopPropagation(), n.gesture.preventDefault(), n.gesture.stopPropagation(), t = n.gesture, syosDispatch.trigger("touch:didDrag", n.gesture), i = this.lastDragCenter.pageX - t.center.pageX, r = this.lastDragCenter.pageY - t.center.pageY, syosDispatch.trigger("control:smartMove", i, r), this.lastDragCenter = t.center, !1 }, didDragStart: function (n) { n.preventDefault(); n.stopPropagation(); n.gesture.preventDefault(); n.gesture.stopPropagation(); var t = n.gesture; return syosDispatch.trigger("touch:didDragStart", n.gesture), this.lastDragCenter = t.center, !1 }, didDragEnd: function (n) { n.preventDefault(); n.stopPropagation(); n.gesture.preventDefault(); n.gesture.stopPropagation(); var t = n.gesture; return syosDispatch.trigger("touch:didDragEnd", t), !1 }, getDefaultCenter: function () { return { pageX: 0, pageY: 0 } } }, n }(); r.Keyboard = function () { var t = SYOSView.extend({ initialize: function () { this.active = !1; n(document).on("keydown", i(this.didKeyup).bind(this)) }, events: { mouseover: "didMouseOver", mouseout: "didMouseOut" }, didMouseOver: function () { this.active = !0 }, didMouseOut: function () { this.active = !1 }, didKeyup: function (n) { if (this.active) { var t = n.keyCode.toString(); t in this.keycodeAliases && (t = this.keycodeAliases[t]); t in this.keycodeActions && this.keycodeActions[t].apply(this, [n]) } }, keycodeAliases: { "107": "187", "109": "189" }, keycodeActions: { "37": function (n) { n.preventDefault(); n.returnValue = !1; syosDispatch.trigger("control:moveLeft") }, "38": function (n) { n.preventDefault(); n.returnValue = !1; syosDispatch.trigger("control:moveUp") }, "39": function (n) { n.preventDefault(); n.returnValue = !1; syosDispatch.trigger("control:moveRight") }, "40": function (n) { n.preventDefault(); n.returnValue = !1; syosDispatch.trigger("control:moveDown") }, "187": function () { var n = this.syos.settings.get("ZoomIncrement"); syosDispatch.trigger("control:smartZoom", n, null, null) }, "189": function () { var n = -1 * this.syos.settings.get("ZoomIncrement"); syosDispatch.trigger("control:smartZoom", n, null, null) } } }); return { Controller: t } }(); r.Display = function () { SYOSDisplay = SYOSModel.extend({ defaults: { InFullscreen: !1 }, initialize: function () { this.syos.display = this; this.Control = this.control = new SYOSControl; this.Keyboard = this.keyboard = new SYOSKeyboard; this.View = this.view = new SYOSDisplayView({ model: this }); this.LoadingView = this.loadingView = new SYOSLoadingView({ model: this }); syosDispatch.on("control:zoom", i(function (n) { n ? this.zoomIn() : this.zoomOut() }).bind(this)); syosDispatch.on("control:shouldOpenLevel", this.shouldOpenLevel, this); this.on("change:InFullscreen", i(function () { this.syos.settings.set({ InFullscreen: this.get("InFullscreen") }) }).bind(this)); syosDispatch.on("levelDidOpen", this.levelDidOpen, this) }, shouldOpenLevel: function (n) { syosDispatch.trigger("showLoadingMessage", { text: "Loading Level..." }); n.showLevel() }, levelDidOpen: function () { return syosDispatch.trigger("display:willShowMap"), this.view.toolsView && this.view.toolsView.present(), this }, shouldChangeLevels: function () { return syosDispatch.trigger("display:willShowLevelSelection"), this.view.toolsView && this.view.toolsView.dismiss(), this.view.levelSelection && this.view.levelSelection.present(), this }, zoomIn: function () { var n = this.syos.settings.get("ZoomIncrement"); syosDispatch.trigger("control:smartZoom", n) }, zoomOut: function () { var n = this.syos.settings.get("ZoomIncrement"); syosDispatch.trigger("control:smartZoom", -n) } }); SYOSDisplayView = SYOSView.extend({ __bbType: "SYOSDisplayView", template: Handlebars.templates["display.html"], initialize: function () { var r = this, t; this.setElement(document.getElementById("syos")); this.initColors(); this.initSeatViews(); this.initLegend(); this.initLevelMap(); this.HasAutoscrolled = !1; this.syos.config.touchMode && this.initTouch(); this.levelSwitch = new SYOSLevelSwitchView; syosDispatch.on("control:zoom", function () { r.attemptAutoscroll() }); syosDispatch.on("map:seatSelected", this.attemptAutoscroll, this); syosDispatch.on("control:toggleFullscreen", this.toggleFullscreen, this); syosDispatch.trigger("display:didInit", this); this.render(); t = i(this.sizeViewport).bind(this); n(window).resize(t); this.syos.settings.get("useAutoSizing") && n(window).off("resize") }, toggleFullscreen: function () { var t = this; return n("#syos").fadeOut(600, function () { n("#syos").toggleClass("fixedscreen"); n("#syos").toggleClass("fullscreen"); n("#syos").fadeIn(600, function () { t.model.get("InFullscreen") ? t.$el.find("[data-bb-event='toggle-fullscreen']").html("Close Fullscreen") : t.$el.find("[data-bb-event='toggle-fullscreen']").html("Fullscreen") }) }), t.model.set({ InFullscreen: !t.model.get("InFullscreen") }), t }, initSeatViews: function () { this.seatViews = new SYOSSeatViewLayer }, initColors: function () { return this.colors = new SYOSSeatColorCollection, this.colors.add(i(this.syos.rootData.SeatColors).values()), this }, initTouch: function () { this.touch = new r.Touch({ el: this.el }) }, initLevelMap: function () { var n = this.$el.find("#chooseLevel")[0]; this.syos.settings.get("levelSelectMap") && (this.levelSelection = new SYOSLevelSelectionView({ el: n }), this.initLevelSummary()) }, initLevelSummary: function () { this.levelSummary = new SYOSLevelSummary }, initToolsView: function () { this.toolsView && this.toolsView.remove(); this.toolsView = new SYOSToolsView({ el: this.$el.find("#syosTools")[0] }) }, events: { selectstart: "didStartSelect" }, didStartSelect: function (n) { return n.preventDefault(), this }, initLegend: function () { return this.legend = new SYOSLegend, this.legend.addSeatColors(this.colors), this.el.appendChild(this.legend.render().el), this }, attemptAutoscroll: function () { var t = this, i = n(window), u = this.$el.offset().top + this.$el.height(), f = i.scrollTop() + i.height(), r; f < u && t.HasAutoscrolled === !1 && (r = t.$el.offset().top * .9, n("body").animate({ scrollTop: r + "px" }), t.HasAutoscrolled = !0) }, centerOnScreen: function () { this.$el.css("position", "absolute"); this.$el.css("top", Math.max(0, (n(window).height() - this.outerHeight()) / 2 + n(window).scrollTop()) + "px"); this.$el.css("left", Math.max(0, (n(window).width() - this.outerWidth()) / 2 + n(window).scrollLeft()) + "px") }, loadLevelDropdown: function () { this.levelDropdown = new SYOSLevelDropdown }, sizeViewport: function () { var n = this.syos.utility.getCanvasHeight(); this.$el.find(".syos-canvas").css("height", n + "px") }, viewModel: function () { return { showLevelMap: this.syos.settings.get("levelSelectMap"), showToolsView: this.syos.settings.get("toolsMenu"), levelViews: this.syos.rootData.LevelViews, levelClass: this.getLevelClassName() } }, getLevelClassName: function () { var n = this.syos.performance.venue.get("name"); return n = n.split(" ")[0], n.toLowerCase() }, render: function () { SYOSView.prototype.render.apply(this, arguments); this.el.appendChild(this.legend.render().el); this.seatViews.setElement(this.$el.find("#seatsWrap")[0]); this.levelSwitch.setElement(this.$el.find("#changeLevel")[0]); this.levelSwitch.render(); var n = this.$el.find("#chooseLevel")[0]; return n && this.levelSelection.setElement(n), this.initToolsView(), this.levelSummary && (this.levelSummary.setElement(this.$el.find("#levelSummary")[0]), this.levelSummary.render()), this.levelDropdown && this.$el.find("#changeLevels").hide().after(this.levelDropdown.el), this.sizeViewport(), this } }); SYOSDisplaySubview = SYOSView.extend({ present: function () { return this.deactivated || this.$el.fadeIn(), this }, dismiss: function () { return this.$el.fadeOut(), this }, openLevel: function (n) { return syosDispatch.trigger("showLoadingMessage", { text: "Loading Level..." }), n.showLevel(), this }, deactivate: function () { this.deactivated = !0; this.dismiss() } }); SYOSControl = t.Model.extend({ initialize: function () { syosDispatch.on("scroll:up", function () { syosDispatch.trigger("control:zoom", !0) }); syosDispatch.on("scroll:down", function () { syosDispatch.trigger("control:zoom", !1) }) } }); SYOSKeyboard = SYOSModel.extend({ initialize: function () { var t = this; n(window).on("keyup", function (n) { t.sendEventForKeycode(n.keyCode) }); n(document).on("mousewheel", ".syos-canvas", i(function (n) { var t = this.syos.settings.get("ZoomIncrement"), i, r, u; n.preventDefault(); i = n.originalEvent.wheelDelta || -n.originalEvent.detail; i && i <= 0 && (t = -t); r = n.offsetX || n.originalEvent.layerX; u = n.offsetY || n.originalEvent.layerY; console.log("mouse xy not tap: " + r + ", " + u); syosDispatch.trigger("control:smartZoom", t, r, u) }).bind(this)) }, sendEventForKeycode: function (n) { var t; switch (n) { case 27: t = "escape"; break; case 37: t = "arrowLeft"; break; case 38: t = "arrowUp"; break; case 39: t = "arrowRight"; break; case 40: t = "arrowDown" } t && syosDispatch.trigger("keyboard:" + t) } }); SYOSToolsView = SYOSDisplaySubview.extend({ initialize: function () { var t = this; this.setElement(n("#syosTools")); this.syos.settings.get("showFullscreen") || this.$el.find('[data-bb-event="toggle-fullscreen"]').hide(); this.$el.find("#zoomSlider").slider({ value: this.syos.utility.getCurrentZoom(), orientation: "vertical", max: this.syos.settings.get("ZoomMax"), min: this.syos.settings.get("ZoomMin"), step: this.syos.settings.get("ZoomIncrement"), slide: function (n, t) { this.syos.settings.set({ CurrentZoom: t.value }) } }); this.$el.find("#zoomSlider").slider("value", this.syos.utility.getCurrentZoom()); syosDispatch.on("levelDidOpen", function (t) { t.SeatViews.length === 0 ? n("#toggleView").hide() : n("#toggleView").show() }); this.syos.settings.on("change:CurrentZoom", function () { t.$el.find("#zoomSlider").slider("value", this.syos.utility.getCurrentZoom()) }); return t }, events: { "click .zoomIn": "zoomIn", "click .zoomOut": "zoomOut", "click [data-bb-event='toggle-fullscreen']": "toggleFullscreen", "click [data-bb-event='toggle-seat-view']": "toggleSeatViews", "click #moveN": "moveUp", "click #moveE": "moveRight", "click #moveS": "moveDown", "click #moveW": "moveLeft" }, moveUp: function () { syosDispatch.trigger("control:moveUp") }, moveRight: function () { syosDispatch.trigger("control:moveRight") }, moveDown: function () { syosDispatch.trigger("control:moveDown") }, moveLeft: function () { syosDispatch.trigger("control:moveLeft") }, zoomIn: function () { syosDispatch.trigger("control:zoom", !0) }, zoomOut: function () { syosDispatch.trigger("control:zoom", !1) }, toggleFullscreen: function () { syosDispatch.trigger("control:toggleFullscreen") }, toggleSeatViews: function (n) { return syosDispatch.trigger("toggleSeatViews"), n.preventDefault(), this } }); SYOSLevelSwitchView = SYOSDisplaySubview.extend({ __bbType: "SYOSLevelSwitchView", template: Handlebars.templates["levelSwitch.html"], initialize: function () { this.listenTo(syosDispatch, "core:didChangeLevelPricing", this.didChangePricing, this); syosDispatch.on("display:willShowLevelSelection", this.dismiss, this); syosDispatch.on("display:willShowMap", this.present, this); syosDispatch.on("levelDidOpen", this.render, this) }, events: { "click [data-bb-event='change-levels']": "didClickChangeLevels", "change [data-bb='changeLevelSelect']": "didChangeLevelSelect" }, didChangeLevelSelect: function (n) { n.preventDefault(); var i = n.currentTarget.value, t = this.syos.levels.detect(function (n) { return n.get("LevelName") === i }); t && this.openLevel(t) }, didChangePricing: function () { console.log("Updating level selection prices..."); this.syos.display.view.levelSummary.render() }, didClickChangeLevels: function (n) { n.preventDefault(); this.syos.display.shouldChangeLevels() }, render: function () { this.el.innerHTML = this.template(this); var n = this.syos.activeLevel && this.syos.activeLevel.get("LevelName"); return this.$el.find("#changeLevelSelect").val(n || ""), syosDispatch.trigger("display:finishLevelSwitch"), this } }); SYOSLevelSelectionView = SYOSDisplaySubview.extend({ initialize: function () { syosDispatch.on("display:levelDidOpen", this.didOpenLevel, this); this.$el.bind("mousewheel", function (n) { n.stopPropagation() }) }, events: { "mouseenter area": "highlightLevel", "click area": "showLevel" }, didOpenLevel: function () { this.dismiss() }, highlightLevel: function (t) { var i = this, r = n(t.target).attr("href").replace("#level", ""); return n("#chooseCommand").fadeOut(150), n(".houseView_level" + r).show().siblings("img:not(#houseView)").hide(), i.$el.find("li").eq(r - 1).fadeIn(150).siblings().fadeOut(150), i }, showLevel: function (t) { var i = this, r, u, f; return t.preventDefault(), syosDispatch.trigger("willShowLevel"), syosDispatch.trigger("showLoadingMessage", { text: "Loading Level..." }), r = n(t.currentTarget).index(), u = this.syos.rootData.LevelViews[r].LevelId, console.log("Showing level..."), f = this.syos.levels.detect(function (n) { return parseInt(n.get("LevelNumber"), 10) === u }), i.dismiss(), f.showLevel(), i } }); SYOSLoadingView = SYOSDisplaySubview.extend({ defaultOptions: { loadingText: "Loading...", showSeats: !0 }, initialize: function () { this.setElement(document.getElementById("syosLoading")); this.$el.hide(); syosDispatch.on("showLoadingMessage", this.handleLoadingMessageRequest, this); syosDispatch.on("hideLoadingMessage", this.hideLoadingMessage, this); return this }, hideLoadingMessage: function () { return this.dismiss(), n("#syos-full-loading").each(function () { n(this).hide() }), this }, handleLoadingMessageRequest: function (t) { return i(t).defaults(this.defaultOptions), this.$el.find("#syos-loading-text").text(t.text), this.present(), t.showSeats ? this.$el.find("img").show() : this.$el.find("img").hide(), n("#syos-full-loading").each(function () { n(this).show() }), this } }); SYOSModal = SYOSView.extend({ template: Handlebars.templates["modal.html"], defaultOptions: function () { return { CanDismiss: !0, Height: this.syos.settings.get("modalDefaultHeight"), Width: this.syos.settings.get("modalDefaultWidth") } }, initialize: function () { i.defaults(this.options, this.defaultOptions()); this.setElement(document.getElementById("syos-modal")); this.$overlay = n("#syos-modal-overlay"); this.render().show(); syosDispatch.on("keyboard:escape", this.close, this); return this }, events: { "click [data-bb-event='close']": "close", "click [data-bb-event='action']": "actionHandler", mousewheel: "stopProp" }, actionHandler: function (t) { var i = n(t.currentTarget).index(); return this.options.Actions ? this.options.Actions[i].Fn.call(null, this) : console.error("Actions are undefined for modal!"), this }, show: function () { return this.$overlay.fadeIn(), this.$el.fadeIn(), this }, close: function () { return this.$el.fadeOut(), this.$overlay.fadeOut(), this }, render: function () { this.el.innerHTML = this.template(this.options); var n = (100 - this.options.Height) / 2, t = (100 - this.options.Width) / 2; return this.$el.css({ width: this.options.Width + "%", height: this.options.Height + "%", top: n + "%", left: t + "%" }), this } }); SYOSSeatTooltip = SYOSView.extend({ className: "syos-seat-tooltip", positionAdjustment: { x: 0, y: 0 }, adjustCoordinates: function (n) { var t = i(n).clone(); return t.x += this.positionAdjustment.x, t.y += this.positionAdjustment.y, t }, positionToCircle: function (n) { var i = this.syos.canvasMap.getPositionForCircle(n), t = this.adjustCoordinates(i); this.$el.css({ top: t.y, left: t.x }) }, positionToSeat: function (n) { var t = n.mapCircle; this.positionToCircle(t) } }); SYOSLegend = SYOSView.extend({ className: "syos-legend", template: Handlebars.templates["legend.html"], initialize: function () { this.legendItems = new SYOSLegendItemCollection; this.legendItems.on("add remove change", this.render, this) }, addLegendItemWithColorAndText: function (n, t) { var n = n || "#000", t = t || "legend item text"; this.legendItems.add({ color: n, text: t }) }, addSeatColors: function (n) { var t = n.map(this.seatColorMapping, this); t = i(t).compact(); this.legendItems.add(t) }, viewModel: function () { return { items: this.legendItems.toJSON() } }, seatColorMapping: function (n) { var t = new SYOSLegendItem({ color: n.get("Color"), text: n.get("Description") }); if (n.get("Description")) return t }, reset: function () { this.legendItems.reset(); this.render() }, render: function () { return this.el.innerHTML = this.template(this.viewModel()), this } }); SYOSLegendItem = SYOSModel.extend({}); SYOSLegendItemCollection = SYOSCollection.extend({ model: SYOSLegendItem }); SYOSLevelSummary = SYOSView.extend({ __bbType: "SYOSLevelSummary", template: Handlebars.templates["levelSummary.html"], initialize: function () { this.syos.levels.on("change", this.render, this); return this.render(), this }, viewModel: function () { return this.syos.levels.map(function (n) { var t = n.toJSON(), r = n.get("LevelName").replace(/ /g, ""); return i(t).extend({ levelClassName: r, priceRangeString: n.priceRangeString() }), t }) } }); SYOSStatusView = SYOSView.extend({ __bbType: "SYOSStatusView", className: "syos-status-view", initialize: function () { this.shown = !1; this.hide(); this.statusElement = document.createElement("span"); this.el.appendChild(this.statusElement); this.statusElement.innerText = "Status Message"; syosDispatch.on("display:shouldUpdateStatus", this.shouldUpdateStatus, this) }, shouldUpdateStatus: function (n, t) { var t = t || 1e3; this.showStatus(); this.statusElement.innerText = n; this.setDelayedHide(t) }, setDelayedHide: function (n) { this.hideTimeout = setTimeout(i(this.hideStatus).bind(this), n) }, showStatus: function () { this.shown || (this.$el.show(), this.shown = !0) }, hideStatus: function () { this.shown && (this.$el.hide(), this.shown = !1) } }); SYOSSeatViewLayer = SYOSView.extend({ initialize: function () { this.seatViewIcons = []; this.showing = !1; syosDispatch.on("levelDidOpen", this.hideSeatViews, this); syosDispatch.on("toggleSeatViews", this.toggleSeatViews, this) }, toggleSeatViews: function () { return this.showing ? this.hideSeatViews() : this.showSeatViews(), this }, showSeatViews: function () { return this.showing = !0, this.syos.activeLevel.seatViews.each(function (n) { this.el.appendChild(this._createIconFromView(n).el) }, this), this }, hideSeatViews: function () { return this.showing = !1, i(this.seatViewIcons).each(this._removeSeatViewIcon, this), this }, _removeSeatViewIcon: function (n) { this.seatViewIcons = i(this.seatViewIcons).without(n); n.remove() }, _createIconFromView: function (n) { var t = new SYOSSeatViewIcon({ model: n }); return this.seatViewIcons.push(t), t } }); SYOSSeatViewIcon = SYOSView.extend({ tagName: "img", className: "syos-seat-view-icon", events: { click: "showSeatView" }, initialize: function () { var n = this.syos.utility.getCurrentZoom(); this._position(); syosDispatch.on("map:didUpdateState", this._position, this); syosDispatch.on("control:smartZoom", this._position, this); syosDispatch.on("control:smartMove", this._position, this); syosDispatch.on("map:dragged", this._position, this); syosDispatch.on("map:willDrag", this.fadeOut, this) }, _position: function () { var n = this.syos.utility.scaleCoordinates(this.model.get("X"), this.model.get("Y")), t = this.syos.canvasMap.getCircleMapOffset(); n.x += t.x; n.y += t.y; this.el.setAttribute("src", this.syos.settings.get("seatViewIconPath")); this.el.style.top = n.y + "px"; this.el.style.left = n.x + "px" }, fadeOut: function () { this.$el.hide(); syosDispatch.on("map:dragged", this.fadeIn, this) }, fadeIn: function () { this.$el.show("drop", { duration: 150, direction: "down" }); syosDispatch.off("map:dragged", this.fadeIn, this) }, showSeatView: function () { return console.log("SeatViewIcon: showing seat view modal..."), this.modal = new SYOSModal({ Title: "View from Seats", Width: this.syos.settings.get("seatviewWidth"), Height: this.syos.settings.get("seatviewHeight"), Content: "<img src='" + this.model.get("ImageUrl") + "' />" }), this } }); SYOSEmbeddedZoom = SYOSView.extend({ className: "syos-embedded-zoom-wrap", template: Handlebars.templates["embeddedZoom.html"], initialize: function () { this.render() }, events: { "click [data-bb=embeddedZoomIn]": "didClickZoomIn", "click [data-bb=embeddedZoomOut]": "didClickZoomOut" }, getZoomIncrement: function () { var n = this.syos.settings.get("ZoomIncrement"), t = this.syos.settings.get("embeddedZoomModifier"); return n * t }, didClickZoomIn: function () { var n = this.getZoomIncrement(); syosDispatch.trigger("control:smartZoom", -n) }, didClickZoomOut: function () { var n = this.getZoomIncrement(); syosDispatch.trigger("control:smartZoom", n) } }); SYOSPopover = SYOSView.extend({ template: Handlebars.templates["popover.html"], className: "syos-popover", config: { overrideColor: "#3B5998", positionAdjustment: { x: -15, y: -40 } }, initialize: function () { i(this.config).extend(this.options.object); this.seat = this.config.seat; this.circle = this.seat.mapCircle; this.img = this.config.img !== "" ? this.config.img : "/syos/img/cute_ghost.png"; this.bindEvents(this.config.events); this.updateMapCircleColor(this.circle); this.showPopover(); this.positionToCircle(this.circle); syosDispatch.on("display:shouldUpdateStatus", this.updatePopoverPosition, this); syosDispatch.on("levelDidOpen", this.hidePopover, this) }, updateMapCircleColor: function (n) { n.set("fillOverride", this.config.overrideColor) }, bindEvents: function (n) { i(n).each(function (n) { this.$el.on(n.name, n.fn) }, this) }, updatePopoverPosition: function () { this.positionToCircle(this.circle) }, showPopover: function () { this.render(); this.syos.addSubview(this) }, hidePopover: function () { this.syos.removeSubview(this) }, adjustCoordinates: function (n) { var t = i(n).clone(); return t.x += this.config.positionAdjustment.x, t.y += this.config.positionAdjustment.y, t }, positionToCircle: function (n) { var i = this.syos.canvasMap.getPositionForCircle(n), t = this.adjustCoordinates(i); this.$el.css({ top: t.y, left: t.x }) }, viewModel: function () { return i.extend({ img: this.img }) } }) }(); r.Facebook = function () { var n = SYOSView.extend({ defaults: { UserId: 0 }, initialize: function () { this.on("change:UserId", this.loadFacebookData, this); syosDispatch.on("map:didFinishLevelInit", this.loadFacebookData, this); syosDispatch.on("display:shouldUpdateStatus", this.updatePopoverPosition, this) }, overrideColor: "#3B5998", loadFacebookData: function () { this.removeAllPopover(); this.sharedSeats = new SYOSSeatCollection; this.sharedSeats.add(this.syos.activeLevel.seats.first()); this.sharedSeats.add(this.syos.activeLevel.seats.last()); this.checkSeats() }, removeAllPopover: function () { this.sharedSeats && this.sharedSeats.each(function (n) { n.popover && n.popover.hidePopover() }, this) }, updatePopoverPosition: function () { this.sharedSeats && this.sharedSeats.each(function (n) { n.popover.positionToCircle(n.mapCircle) }, this) }, checkSeats: function () { this.sharedSeats && this.sharedSeats.each(function (n) { n.mapCircle.set("fillOverride", this.overrideColor); n.popover = new SYOSPopover; n.popover.positionToCircle(n.mapCircle) }, this) } }); return { Controller: n } }(); window.SYOS = r }(jQuery, Backbone, _); typeof console == "undefined" && (console = {}, console.log = function () { return this }); typeof chrome == "undefined" && (console.info = function () { return this }, console.warn = function () { return this }, console.error = function () { return this }, console.group = function () { return this }, console.groupCollapsed = function () { return this }, console.groupEnd = function () { return this }, console.time = function () { return this }, console.timeEnd = function () { return this }, console.trace = function () { return this }, console.count = function () { return this }, console.dirxml = function () { return this }); console.style = { majorWarn: "color:white; background:rgba(255,0,0,0.6); font-weight:bold;" }; Handlebars.registerHelper("log", function (n) { console.log("Handlebars", n) }); Handlebars.registerHelper("call", function (n, t) { return n.call(t) }); Handlebars.registerHelper("formattedPrice", function (n) { n = isNaN(n) || n === "" || n === null ? 0 : n; return parseFloat(n).toFixed(2) }); Handlebars.registerHelper("paraFormattedPrice", function (n) { n = isNaN(n) || n === "" || n === null ? 0 : n; var t = parseFloat(n), r = t < 0, i = Math.abs(t).toFixed(2); return r ? "($" + i + ")" : "$" + i }); typeof syosOnReady == "undefined" && (syosOnReady = function () { console.log("syosOnReady not overwritten \n") }); syosOnReady(); SYOS.Canvas = function () { var t = location.href.match(/canvasdebug/), i = SYOSView.extend({ initialize: function () { if (this.setElement(document.getElementById("seatsWrap")), this.mousePosition = new SYOS.Geometry.Coordinates, this.mapOffset = new SYOS.Geometry.Coordinates, this.$circleMap = this.$el.find("#circleMap"), this.initSeatMap(), this.initEmbeddedZoom(), this.syos.config.touchMode) try { this.$circleMap.draggableTouch() } catch (n) { console.error("Error with draggable touch - is the library included?") } else this.$circleMap.draggable(); this.zoomIncrement = this.syos.settings.get("ZoomIncrement"); this.initMetrics(); t && this.initDebugLayer(); this.initEvents() }, initEvents: function () { $(window).resize(_(this.initMetrics).bind(this)); syosDispatch.on("levelDidOpen", this.levelDidOpen, this); syosDispatch.on("buymode:addSeatToCart", this.didAddSeatToCart, this); syosDispatch.on("buymode:removeSeatFromCart", this.didRemoveSeatFromCart, this); syosDispatch.on("control:moveUp", this.moveUp, this); syosDispatch.on("control:moveLeft", this.moveLeft, this); syosDispatch.on("control:moveDown", this.moveDown, this); syosDispatch.on("control:moveRight", this.moveRight, this); syosDispatch.on("control:smartZoom", this.smartZoom, this); syosDispatch.on("control:smartMove", this.smartMove, this) }, initMetrics: function () { this.width = this.$el.width(); this.height = this.$el.height() }, initDebugLayer: function () { var n = document.createElement("canvas"); n.setAttribute("class", "syos-debug-layer"); this.debugLayer = new r({ el: n }); this.el.appendChild(this.debugLayer.el) }, initSeats: function () { this.seatMap.circles.reset(); this.syos.activeLevel.seats.each(function (t) { t.mapCircle = new n(this.getCirclePropertiesForSeat(t)); this.seatMap.circles.add(t.mapCircle) }, this) }, initEmbeddedZoom: function () { this.embeddedZoom = new SYOSEmbeddedZoom; this.addSubview(this.embeddedZoom) }, initBounds: function () { var n = this.seatMap.circles.pluck("x"), t = this.seatMap.circles.pluck("y"); this.maxX = Math.max.apply(null, n); this.maxY = Math.max.apply(null, t); this.minX = Math.min.apply(null, n); this.minY = Math.min.apply(null, t); this.boundWidth = this.maxX + this.minX; this.boundHeight = this.maxY + this.minY }, initSeatMap: function () { var n = this.createCanvasLayer("syos-seat-canvas"); this.seatMap = new f({ el: n, parent: this }); this.$circleMap.append(n) }, createCanvasLayer: function (n) { try { console.groupCollapsed("Canvas Init"); var i = "G_vmlCanvasManager" in window, t = this.getCanvasSize(), r = function () { var i = document.createElement("canvas"); return i.setAttribute("class", n), i.setAttribute("width", t.width), i.setAttribute("height", t.height), i }(); return i && G_vmlCanvasManager.initElement(r), console.log("flashCanvas", i), console.log("size.width", t.width), console.log("size.height", t.height), console.groupEnd(), r } catch (u) { isDevEnvironment && alert("Error creating canvas element"); throw u; } }, clear: function () { this.seatMap.circles.reset(); this.seatMap.renderAll() }, events: { mousemove: "didMousemove", "dragstop .syos-circle-map": "didDrag", "dragstart .syos-circle-map": "willDrag" }, didMousemove: function (n) { var t = this.$el.offset(), i = { x: n.pageX, y: n.pageY }, r = { x: i.x - t.left, y: i.y - t.top }; this.mousePosition.set({ x: r.x, y: r.y }) }, willDrag: function () { syosDispatch.trigger("map:willDrag") }, didDrag: function () { this.updateOffsetFromDrag(); syosDispatch.trigger("map:dragged") }, didTouchDrag: function (n) { var t = this.syos.settings.get("mobileTouchFactor"), i = n.deltaX * t, r = n.deltaY * t; this.$circleMap.css({ left: "+=" + i + "px", top: "+=" + r + "px" }) }, didTouchDragEnd: function () { this.updateOffsetFromDrag() }, updateOffsetFromDrag: function () { var n = this.$circleMap, t = n.position(); n.fadeTo(0, 0); this.mapOffset.addX(t.left); this.mapOffset.addY(t.top); _(function () { n.css({ top: "0", left: "0" }); n.fadeTo(0, 1) }).delay(100) }, moveUp: function (n) { var n = n || this.syos.settings.get("PanIncrement"); this.mapOffset.addY(-n); this.checkMap() }, moveLeft: function (n) { var n = n || this.syos.settings.get("PanIncrement"); this.mapOffset.addX(n); this.checkMap() }, moveDown: function (n) { var n = n || this.syos.settings.get("PanIncrement"); this.mapOffset.addY(n); this.checkMap() }, moveRight: function (n) { var n = n || this.syos.settings.get("PanIncrement"); this.mapOffset.addX(-n); this.checkMap() }, smartZoom: function (n, t, i) { var t = t || this.getCanvasSize().width / 2, i = i || this.getCanvasSize().height / 2, f = n || this.zoomIncrement, r = this.syos.utility.getCurrentZoom(); this.syos.settings.adjustZoom(f); var u = this.syos.utility.getCurrentZoom(), e = this.syos.utility.getZoomPointCoordinate(r, u, t, 1 * this.mapOffset.get("x")), o = this.syos.utility.getZoomPointCoordinate(r, u, i, 1 * this.mapOffset.get("y")); this.mapOffset.set({ x: e, y: o }); this.checkMap() }, centerOnPoint: function (n, t) { var o = this.syos.utility, f = this.syos.settings.get("levelImageHeight"), e = this.syos.settings.get("levelImageWidth"), i = { x: n || e * .5, y: t || f * .5 }, r = { x: this.$el.width() * .5, y: this.$el.height() * .5 }, u = { x: r.x - i.x, y: r.y - i.y }; console.log(i, r, u); this.smartMove(u.x, u.y) }, smartMove: function (n, t) { var i = this.mapOffset.toJSON(); i.x -= n; i.y -= t; this.mapOffset.set(i); this.checkMap() }, sizeToElement: function () { var o = this.syos.settings.get("levelImagePadding"), n = this.$el.width(), t = this.syos.settings.get("levelImageWidth"), i = n / t, r = this.$el.height(), u = this.syos.settings.get("levelImageHeight"), f = r / u, e = Math.min(i, f); this.syos.settings.set("CurrentZoom", e); syosDispatch.trigger("didFinishCurrentZoom") }, levelDidOpen: function () { this.seatMap.allowRendering = !1; this.initSeats(); this.initBounds(); this.seatMap.clear(); this.mapOffset.set({ x: 0, y: 0 }); this.seatMap.resetPosition(); this.sizeToElement(); this.seatMap.allowRendering = !0; this.seatMap.renderAll(); var n = this.syos.activeLevel.getBackgroundImageUrl(); this.seatMap.updateBackground(n); syosDispatch.trigger("hideLoadingMessage"); syosDispatch.trigger("map:didFinishLevelInit") }, didAddSeatToCart: function (n) { n.mapCircle.set("inCart", !0) }, didRemoveSeatFromCart: function (n) { n.set("IsInCart", !1); n.mapCircle.set("inCart", !1) }, checkMap: function () { var i = this.syos.utility.getCurrentZoom(), n = i * this.boundWidth, t = i * this.boundHeight, r = parseInt(this.seatMap.el.style.left.replace(/px/, "")), u = parseInt(this.seatMap.el.style.top.replace(/px/, "")); r < -n ? this.seatMap.el.style.left = "-" + n + "px" : r > n && (this.seatMap.el.style.left = n + "px"); u < -t ? this.seatMap.el.style.top = "-" + t + "px" : u > t && (this.seatMap.el.style.top = t + "px") }, getCircleMapOffset: function () { return this.adjustMapOffset(), this.mapOffset.toJSON() }, adjustMapOffset: function () { var n = this.syos.utility.getCurrentZoom(), t = this.mapOffset.get("x"), i = this.mapOffset.get("y"), e = this.maxX * n + t, o = this.maxY * n + i, s = this.minX * n + t, h = this.minY * n + i, r = this.getCanvasSize(), u = this.syos.settings.get("boundaryOffsetX"), f = this.syos.settings.get("boundaryOffsetY"); this.mapOffset.set("x", Math.min(Math.max(t, -(this.maxX * n) + u), r.width - this.minX * n - u)); this.mapOffset.set("y", Math.min(Math.max(i, -(this.maxY * n) + f), r.height - this.minY * n - f)) }, getCanvasSize: function () { return { width: this.$el.width(), height: this.$el.height() } }, getPositionForCircle: function (n) { var t = n.scaledAttributes(), i = this.getCircleMapOffset(); return { x: t.x + i.x, y: t.y + i.y } }, getCirclePropertiesForSeat: function (n) { var t = "", r = this.syos.settings.get("seatRadius"), i = null; return n.seatType && (t = n.seatType.get("Overlay")), this.syos.settings.get("showSeatNumbers") && (i = n.get("NumberText")), { id: n.id, active: n.get("IsAvailable"), inCart: n.get("IsInCart"), overlay: t, x: n.attributes.Circle.X, y: n.attributes.Circle.Y, radius: r, text: i } }, addSeatPopover: function (n) { n.seat && n.seat.mapCircle ? n.seat.popover = new SYOSPopover({ object: n }) : console.warn("invalid seat object.") } }), r = SYOSView.extend({ initialize: function () { this.ctx = this.el.getContext("2d"), function (n) { n.position = "absolute"; n.left = 0; n.top = 0 }(this.el.style); syosDispatch.on("map:didFinishInit", this.mapDidFinishInit, this) }, mapDidFinishInit: function () { this.updateSize(); this.syos.canvasMap.mousePosition.on("change", this.draw, this) }, updateSize: function () { var n = this.syos.canvasMap.$el.width(), t = this.syos.canvasMap.$el.height(); this.el.width = n; this.el.height = t; this.draw() }, draw: function () { this.ctx.save(); this.drawClear(); this.drawMouseCrosshair(); this.ctx.restore() }, drawClear: function () { this.el.width = this.el.width }, drawMouseCrosshair: function () { this.ctx.save(); var n = this.syos.canvasMap.mousePosition.toJSON(); this.ctx.lineWidth = 1; this.ctx.globalAlpha = .3; this.ctx.strokeStyle = "red"; this.ctx.moveTo(n.x, 0); this.ctx.lineTo(n.x, this.el.height); this.ctx.moveTo(0, n.y); this.ctx.lineTo(this.el.width, n.y); this.ctx.stroke(); this.ctx.restore() } }), n = SYOSModel.extend({ defaults: { fillOverride: null, underCursor: !1, inCart: !1, selected: !1, text: null }, initialize: function () { this.overlayLoaded = !1; var n = this.img = new Image; !this.get("overlay") && "G_vmlCanvasManager" in window || this.initOverlay() }, initOverlay: function () { this.img.onload = _(this.didLoadOverlay).bind(this); this.img.src = this.get("overlay") }, didLoadOverlay: function () { this.overlayLoaded = !0; this.trigger("didLoadOverlay") }, getFill: function () { var n = "Main"; if (this.get("active")) { if (this.get("inCart")) n = "Highlight"; else if (this.get("selected")) n = "ZoneHighlight"; else if (this.get("underCursor")) n = "ZoneHighlight"; else if (this.get("fillOverride")) return this.get("fillOverride") } else n = "Unavailable"; return this.syos.activeLevel.seatColors.getColorForKey(n).get("Color") }, scaledAttributes: function () { var n = this.syos.utility.scaleCoordinates(this.get("x"), this.get("y")), t = this.getRadius(); return { x: n.x, y: n.y, radius: t } }, getRadius: function () { return this.syos.utility.scaleScalar(this.get("radius")) }, distanceFromPoint: function (n, t) { var i = this.scaledAttributes(), r = Math.pow(n - i.x, 2), u = Math.pow(t - i.y, 2); return Math.sqrt(r + u) }, isPointInCircle: function (n, t, i) { var i = i || 0, r = this.getRadius() + i; return this.distanceFromPoint(n, t) < r } }), u = SYOSCollection.extend({ model: n, getActiveCircles: function () { return this.select(function (n) { return n.get("active") }) }, getCircleForCoordinatesAndRadius: function (n, t) { var t = t || this.syos.settings.get("seatRadius"), i = Infinity, r = null, f = this.syos.utility.scaleScalar(n.x), e = this.syos.utility.scaleScalar(n.y), u; return this.each(function (n) { var t = n.distanceFromPoint(f, e); t < i && (r = n, i = t) }, this), u = this.syos.utility.scaleScalar(t), i < u ? r : null } }), f = SYOSView.extend({ initialize: function () { console.log("CanvasMap: initializing SeatMap..."); this.canvasMap = this.options.parent; this.ctx = this.getRenderContext(); this.allowRendering = !0; this.renderConditions = []; this.determineMode(); this.initBackgroundImage(); this.circles = new u; this.circles.on("change", this.didChangeCircle, this); this.hoverCircle = null; this.clickCircle = null; $(window).resize(_(this.didSizeWindow).bind(this)); this.syos.settings.on("change:CurrentZoom", this.didChangeZoom, this); this.canvasMap.mapOffset.on("change", this.renderAll, this) }, initBackgroundImage: function () { var n = this.syos.settings.get("levelImageWidth"), t = this.syos.settings.get("levelImageHeight"); this.background = document.createElement("img"); this.background.setAttribute("width", n); this.background.setAttribute("height", t) }, initTimedRender: function () { setInterval(_(function () { this.fullRender() }).bind(this), 1e3) }, updateBackground: function (n) { this.background.onload = _(this.renderAll).bind(this); this.background.src = n }, events: { mousemove: "didMousemove", click: "didMousedown", tap: "didTap" }, didMousemove: function (n) { return this.syos.activeLevel && !this.syos.config.touchMode && (this.updateMousePosition(n), this.determineCircle(), syosTestModeActive && (this.clear(), this.renderAll(), this.drawLineToHoverCircle())), this }, didMousedown: function (n) { this.hoverCircle && !this.syos.config.touchMode && (n.preventDefault(), n.stopPropagation(), n.returnValue = !1, syosDispatch.trigger("canvas:didClickSeat", this.syos.activeLevel.seats.get(this.hoverCircle.id))) }, didTap: function (n) { var t = $(n.currentTarget).offset(), i, r; n.offsetX = this.syos.utility.getTouchAverageForKey(n.originalEvent.gesture.touches, "pageX"); n.offsetX -= t.left; n.offsetY = this.syos.utility.getTouchAverageForKey(n.originalEvent.gesture.touches, "pageY"); n.offsetY -= t.top; i = this.syos.utility.scaleScalar(this.syos.settings.get("seatRadius")); i >= 10 || !this.syos.config.touchMode ? (this.updateMousePosition(n), this.determineCircle(), this.hoverCircle && syosDispatch.trigger("canvas:didClickSeat", this.syos.activeLevel.seats.get(this.hoverCircle.id))) : (r = this.syos.settings.get("ZoomIncrement") * this.syos.settings.get("embeddedZoomModifier"), syosDispatch.trigger("control:smartZoom", r, n.offsetX, n.offsetY)); console.log("tap") }, didTapEmpty: function () { }, didSizeWindow: _(function () { this.determineSimplified(); this.renderAll() }).debounce(500), didChangeCircle: function (n) { this.ctx.save(); var t = this.syos.utility.getCurrentZoom(), i = this.canvasMap.getCircleMapOffset(); this.ctx.translate(i.x, i.y); this.ctx.scale(t, t); this.renderCircle(this.ctx, n); this.ctx.restore() }, didChangeZoom: function () { this.renderAll() }, determineMode: function () { var t = this.getContext("2d"), n = this.mode = {}; n.shadows = !_(window.chrome).isUndefined(); n.mozSmooth = _(t).has("mozImageSmoothingEnabled"); n.webkitSmooth = _(t).has("webkitImageSmoothingEnabled"); this.determineSimplified() }, determineSimplified: function () { var n = this.syos.utility.isMobileWidth(); n ? (console.log("SeatMap: forcing to simplified mode due to small viewport"), this.mode.simplified = !0) : this.mode.simplified = this.syos.settings.get("simplifiedMap") }, determineCircle: function () { var t = Infinity, n = null; return this.circles.each(function (i) { var r = i.distanceFromPoint(this.mouseX, this.mouseY); r < t && (n = i, t = r) }, this), n && this.mouseIsInCircle(n) && n.get("active") ? (this.setHoverCircle(n), this.setCursor("pointer")) : (this.setHoverCircle(null), this.setCursor("")), this }, resetPosition: function () { this.$el.css({ top: "0px", left: "0px" }) }, updateMousePosition: function (n) { var t = n.offsetX || n.originalEvent.layerX, i = n.offsetY || n.originalEvent.layerY; this.mouseX = t - this.canvasMap.mapOffset.get("x"); this.mouseY = i - this.canvasMap.mapOffset.get("y") }, updateCanvasSize: function () { this.el.width = this.canvasMap.$el.width(); this.el.height = this.canvasMap.$el.height() }, setCursor: function (n) { this.$el.css("cursor", n) }, setHoverCircle: function (n) { this.hoverCircle !== null && this.hoverCircle.set("underCursor", !1); this.hoverCircle = n; this.hoverCircle !== null && this.hoverCircle.set("underCursor", !0) }, mouseIsInCircle: function (n) { return n.isPointInCircle(this.mouseX, this.mouseY, 2) }, clear: function () { this.el.width = this.el.width }, addRenderCondition: function (n) { return this.renderConditions.push(n), n }, getShouldRender: function () { var i = this.allowRendering, n, t; return this.renderConditions && (n = _(this.renderConditions).map(function (n) { return n() }), t = _(n).select(function (n) { return !n }), t.length > 0) ? !1 : i }, renderAll: _(function () { var i = this.getShouldRender(), n, t; i && (this.updateCanvasSize(), console.groupCollapsed("Full Map Render"), console.log("offset:", this.canvasMap.mapOffset.toJSON()), console.log("zoom:", this.syos.utility.getCurrentZoom()), n = this.syos.utility.getCurrentZoom(), t = this.canvasMap.getCircleMapOffset(), this.clear(), console.log("current zoom: " + this.syos.utility.getCurrentZoom()), this.ctx.save(), this.ctx.translate(t.x, t.y), this.ctx.scale(n, n), this.renderBackground(this.ctx), syosDispatch.trigger("display:shouldUpdateStatus", "rendering..."), this.circles.each(function (n) { var t = _(this.renderCircle).partial(this.ctx, n); this.mode.simplifiedMap ? _(t).chain().bind(this).delay(10) : _(t).bind(this)() }, this), this.ctx.restore(), console.groupEnd()) }).debounce(100), renderBackground: function (n) { n.save(); n.drawImage(this.background, 0, 0); n.restore() }, renderCircle: function (n, t) { var r = this.getShouldRender(); if (r) { n.save(); var i = t.toJSON(), u = this.syos.utility.getCurrentZoom(), f = u > this.syos.settings.get("seatTextLimit"), e = i.x, o = i.y; n.translate(e, o); this.mode.simplified || (n.fillStyle = "#FFFFFF", this.renderCirclePalette(n, i.radius), n.fillStyle = "#333333", this.renderCircleShadow(n, i.radius)); n.fillStyle = t.getFill(); n.strokeStyle = "#DDD"; this.renderCircleBackground(n, i.radius); t.overlayLoaded ? this.renderCircleOverlay(n, i.radius, t.img) : i.text && f && !this.mode.simplified && (n.fillStyle = "#FFF", this.renderCircleText(n, i.radius, i.text)); n.restore() } }, renderCirclePalette: function (n, t) { var i = t + 1.5; n.beginPath(); n.arc(0, 0, i, 0, Math.PI * 2, !1); n.fill() }, renderCircleShadow: function (n, t) { var i = t + .5; n.beginPath(); n.arc(-.5, .5, i, 0, Math.PI * 2, !1); n.fill() }, renderCircleBackground: function (n, t) { n.beginPath(); n.arc(0, 0, t, 0, Math.PI * 2, !1); n.fill(); n.stroke() }, renderCircleOverlay: function (n, t, i) { var u = 2, r = { x: 0 - t + u, y: 0 - t + u, w: (t - u) * 2 }; n.drawImage(i, r.x, r.y, r.w, r.w) }, renderCircleText: function (n, t, i) { n.save(); n.textBaseline = this.syos.settings.get("circleTextBaseline"); n.font = t + "px " + this.syos.settings.get("circleTextFont"); var u = n.measureText(i).width, f = this.syos.settings.get("circleTextOffset"), r = t * Math.sqrt(3), e = u > r ? 0 - r / 2 : 0 - u / 2, o = t / 2, s = r; n.fillText(i, e, o, r - f); n.restore() }, getRenderContext: function () { return this.el.getContext("2d") }, getContext: function () { var n = this.el.getContext("2d"), t = this.canvasMap.getCircleMapOffset(); return n.translate(t.x, t.y), _(n).has("mozImageSmoothingEnabled") ? n.mozImageSmoothingEnabled = !0 : _(n).has("webkitImageSmoothingEnabled") && (n.webkitImageSmoothingEnabled = !0), n } }); return { Map: i } }()